// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package types

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1)
}

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 1196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x6d, 0x6f, 0xdb, 0x36,
	0x10, 0xd6, 0x87, 0xad, 0x69, 0x58, 0xc7, 0x71, 0x98, 0x34, 0x6b, 0xb4, 0x15, 0x05, 0x04, 0x0c,
	0x1b, 0x30, 0x34, 0x49, 0xed, 0x25, 0xeb, 0xd6, 0x6e, 0x40, 0x9c, 0xd4, 0x8e, 0x31, 0xd7, 0x73,
	0x23, 0x77, 0x03, 0xf6, 0x8d, 0x91, 0x6f, 0x8e, 0x10, 0x59, 0x94, 0x45, 0x2a, 0xb6, 0x7f, 0xc2,
	0xfe, 0xf5, 0x40, 0x52, 0x2f, 0xa4, 0x25, 0x27, 0xd9, 0x37, 0xf3, 0xb9, 0x7b, 0x8e, 0x77, 0xbc,
	0x37, 0x0b, 0x6d, 0xc6, 0x91, 0x77, 0x18, 0xc5, 0x94, 0x53, 0xfc, 0x25, 0x5f, 0x46, 0xc0, 0xec,
	0x9a, 0x47, 0xa7, 0x53, 0x1a, 0x2a, 0xd0, 0xde, 0xe1, 0x31, 0x09, 0x19, 0xf1, 0xb8, 0x9f, 0x43,
	0x8d, 0xeb, 0x80, 0x7a, 0xb7, 0xde, 0x0d, 0xf1, 0x33, 0xa4, 0x36, 0x27, 0x41, 0x00, 0x3c, 0x3d,
	0x6d, 0x46, 0xcd, 0x28, 0xfd, 0xb9, 0x45, 0x3c, 0x8f, 0x26, 0x61, 0x26, 0xa9, 0xc3, 0x02, 0xbc,
	0x84, 0xd3, 0x58, 0x9d, 0x9b, 0xff, 0x7e, 0x8d, 0x36, 0xa4, 0x9d, 0x56, 0x0b, 0xbf, 0x46, 0x9b,
	0x5d, 0xe0, 0x6d, 0x61, 0x9a, 0xe1, 0xc6, 0xa1, 0xf4, 0xe5, 0xf0, 0x0a, 0x66, 0x0a, 0xb1, 0x6b,
	0x39, 0x12, 0x05, 0x4b, 0xc7, 0xc2, 0x47, 0x68, 0xab, 0x0b, 0xbc, 0x4f, 0x18, 0xbf, 0x04, 0x32,
	0x86, 0x18, 0x6f, 0x15, 0x94, 0x81, 0x1f, 0xd8, 0xd9, 0x51, 0x49, 0x1d, 0x0b, 0xff, 0x82, 0xf6,
	0xce, 0x63, 0x20, 0x1c, 0xae, 0xc8, 0x7c, 0x54, 0xc4, 0x84, 0xb7, 0x53, 0x45, 0x25, 0x1c, 0x2d,
	0xec, 0x0c, 0xf8, 0x1c, 0x32, 0x7f, 0x12, 0x8e, 0x16, 0x8e, 0x85, 0x2f, 0x50, 0xa3, 0xe0, 0x2e,
	0xba, 0x31, 0x4d, 0x22, 0xfc, 0xd2, 0xe4, 0x15, 0x16, 0xa5, 0xb8, 0xca, 0xca, 0x6f, 0xa8, 0xf1,
	0x29, 0x81, 0x78, 0xa9, 0xdf, 0x5e, 0x2f, 0xbc, 0xbe, 0x24, 0xec, 0xc6, 0x7e, 0x91, 0x9e, 0x35,
	0x9d, 0x0b, 0xe0, 0xc4, 0x0f, 0x1c, 0x0b, 0x9f, 0xa0, 0x6d, 0x17, 0xc2, 0xb1, 0x4e, 0xc7, 0x65,
	0xf5, 0xd2, 0x4b, 0xfd, 0x8a, 0xf6, 0xba, 0xc0, 0x35, 0x8d, 0xf6, 0xf2, 0x6c, 0x3c, 0x8e, 0xf5,
	0xab, 0xc5, 0xd9, 0xde, 0xd5, 0x79, 0xa3, 0x45, 0x2f, 0xfc, 0x87, 0x32, 0xc7, 0xc2, 0x5d, 0xb4,
	0xbf, 0x4a, 0x17, 0x9e, 0x82, 0x91, 0x24, 0x85, 0xd8, 0x07, 0xeb, 0xbc, 0x17, 0x86, 0xde, 0x22,
	0xd4, 0x05, 0xfe, 0x11, 0xa6, 0x43, 0x4a, 0x03, 0xbc, 0x57, 0x90, 0x15, 0x1a, 0x51, 0x1a, 0xd8,
	0xd8, 0xf4, 0xa1, 0xef, 0x33, 0x2e, 0x03, 0x7f, 0xd6, 0x05, 0x7e, 0xa6, 0x4a, 0x89, 0xad, 0x66,
	0xfa, 0x79, 0x7a, 0xfc, 0x4b, 0xd6, 0x60, 0xa6, 0x25, 0x33, 0x8e, 0x0a, 0xda, 0xca, 0x85, 0x29,
	0x6a, 0xef, 0x55, 0x91, 0x15, 0x77, 0x00, 0xf3, 0x0a, 0x6e, 0x81, 0xae, 0xe5, 0x5e, 0xa1, 0xe7,
	0x0a, 0xd2, 0x9e, 0x41, 0x44, 0x82, 0x5f, 0x15, 0x66, 0x2a, 0x15, 0xec, 0x7d, 0xc3, 0xe2, 0x68,
	0x51, 0x3c, 0x5e, 0x07, 0x6d, 0xf5, 0xa6, 0x11, 0x8d, 0xf9, 0x30, 0xf6, 0xef, 0x6e, 0x61, 0x99,
	0x97, 0x5f, 0x6e, 0xcb, 0x10, 0xaf, 0xf5, 0xad, 0x8d, 0xb6, 0x64, 0x0d, 0x51, 0x91, 0x72, 0x60,
	0xac, 0x6c, 0xc7, 0x10, 0xdb, 0x0d, 0x3d, 0x21, 0x22, 0xcb, 0x8e, 0x85, 0x9b, 0xe8, 0xa9, 0x2b,
	0xbc, 0xeb, 0x00, 0xe0, 0xfd, 0x32, 0x9d, 0x77, 0x00, 0x4a, 0x45, 0xf8, 0x0e, 0x6d, 0xb8, 0xa2,
	0x5d, 0xaf, 0x03, 0xfc, 0xa2, 0x82, 0xd2, 0x27, 0xd7, 0x10, 0xdc, 0xe3, 0x74, 0xed, 0x23, 0xc4,
	0x13, 0x68, 0x93, 0x80, 0x84, 0x1e, 0xe0, 0x6f, 0x56, 0x2d, 0xe8, 0x52, 0xb3, 0x86, 0x54, 0x61,
	0x3a, 0x16, 0x3e, 0x45, 0x9b, 0x2e, 0xf0, 0x21, 0x61, 0x6c, 0x3e, 0xc6, 0x07, 0x15, 0x2e, 0x28,
	0x51, 0xc9, 0xf1, 0x6f, 0xd1, 0x17, 0x7d, 0xea, 0xdd, 0xae, 0x16, 0xdd, 0xaa, 0xda, 0x6b, 0xf4,
	0xe4, 0x73, 0x28, 0x15, 0x77, 0x8d, 0x20, 0x14, 0x58, 0x52, 0x3f, 0x41, 0xf5, 0x74, 0x7a, 0x65,
	0xfd, 0xb0, 0x62, 0xbf, 0xba, 0x11, 0xde, 0xa3, 0x5a, 0x17, 0xf8, 0x30, 0xa6, 0x11, 0xc4, 0xe2,
	0xf5, 0x8b, 0x96, 0x9d, 0xe5, 0x60, 0xde, 0x0f, 0x92, 0x9a, 0xc3, 0x8e, 0x85, 0x7f, 0x42, 0xdb,
	0x5d, 0xe0, 0x69, 0xc0, 0x9c, 0xf0, 0xa4, 0xd4, 0x4a, 0xa6, 0xef, 0x4a, 0x47, 0x36, 0x43, 0x23,
	0x1b, 0xcd, 0x7f, 0xdc, 0x41, 0x7c, 0xe7, 0xc3, 0xbc, 0x34, 0xb8, 0xb2, 0xdc, 0x19, 0x5a, 0xb2,
	0xeb, 0xc5, 0xa5, 0xa2, 0x9c, 0xaa, 0xa8, 0xc6, 0xe0, 0xd1, 0x95, 0x1c, 0x0b, 0xbf, 0x91, 0xc1,
	0x4a, 0x7b, 0xe2, 0x06, 0xdd, 0xd7, 0x5e, 0xc8, 0x2b, 0x2b, 0xf3, 0x0d, 0xda, 0xe8, 0x42, 0xe8,
	0x02, 0x8c, 0xf3, 0xc9, 0x98, 0x9e, 0xfb, 0x24, 0x9c, 0x98, 0x14, 0x81, 0x66, 0x14, 0xbe, 0x42,
	0x91, 0xe7, 0xf6, 0x72, 0x38, 0xaf, 0xa4, 0x1c, 0xa1, 0xa7, 0x2e, 0xb9, 0x03, 0xc9, 0xc9, 0x7c,
	0xcf, 0x00, 0x49, 0x5a, 0xcd, 0x76, 0x53, 0x0e, 0xa2, 0xac, 0x7a, 0x77, 0xb4, 0xdd, 0x96, 0x96,
	0x6c, 0xb6, 0x2c, 0xb4, 0xe1, 0xd5, 0x44, 0x48, 0x2e, 0x8b, 0x73, 0xb1, 0x1e, 0xf3, 0x01, 0x24,
	0x4f, 0x1f, 0xd2, 0x25, 0x5a, 0x75, 0x8f, 0x90, 0xa9, 0xec, 0x3d, 0x92, 0x73, 0x8a, 0xea, 0xea,
	0x1e, 0x1a, 0x32, 0x08, 0x59, 0xc2, 0x1e, 0xc9, 0xfb, 0x19, 0xed, 0x94, 0x36, 0x5f, 0x1e, 0x5a,
	0xb6, 0x4b, 0x7b, 0x61, 0xd5, 0x1e, 0x3c, 0x96, 0xc5, 0x7f, 0x09, 0x8b, 0xd1, 0x42, 0xed, 0x92,
	0x52, 0x31, 0xd5, 0xf2, 0xe5, 0xbd, 0x90, 0x8c, 0x13, 0xf4, 0xec, 0x22, 0x99, 0x46, 0xd9, 0xec,
	0xd3, 0x16, 0x8f, 0xcb, 0x63, 0x3f, 0x9c, 0x98, 0xed, 0xa2, 0x30, 0x55, 0xb7, 0x1a, 0x8d, 0x75,
	0xfc, 0xc0, 0x18, 0x58, 0x3a, 0x5e, 0x8a, 0xef, 0x3d, 0xc2, 0xc6, 0x44, 0xfd, 0x7f, 0xec, 0x43,
	0xb4, 0xf1, 0x27, 0xc4, 0x4c, 0xbc, 0xc9, 0x9a, 0xc6, 0x4e, 0xc5, 0x62, 0xcb, 0x3a, 0x16, 0xfe,
	0x0e, 0x3d, 0xe9, 0x31, 0x77, 0x19, 0x7a, 0x0f, 0xcd, 0x99, 0x53, 0xb9, 0x0a, 0x87, 0x00, 0xb1,
	0x60, 0xe6, 0xb9, 0x1a, 0x36, 0x87, 0x29, 0x7c, 0x05, 0xb3, 0xfc, 0xcd, 0xc5, 0x39, 0x9d, 0x1c,
	0x6f, 0xd1, 0xc6, 0x00, 0xb8, 0xe4, 0x7c, 0x65, 0x70, 0x52, 0x54, 0xd0, 0x32, 0xd7, 0x06, 0x74,
	0x0c, 0x29, 0x2c, 0xab, 0xbd, 0xde, 0x63, 0x03, 0x1e, 0x9d, 0x8b, 0x46, 0x7c, 0x8c, 0x8b, 0xc7,
	0xb2, 0xe3, 0x3b, 0x84, 0x93, 0xa0, 0x43, 0xfc, 0x20, 0x89, 0x61, 0x1d, 0xa3, 0x17, 0xf2, 0x56,
	0x53, 0xa6, 0x77, 0x2f, 0x9d, 0x86, 0xb2, 0xdb, 0x5d, 0x98, 0x25, 0x20, 0x3a, 0x65, 0x3d, 0xed,
	0xf4, 0x47, 0xc7, 0xc2, 0x2d, 0xb4, 0x23, 0x5b, 0x55, 0x69, 0x3f, 0x50, 0x4a, 0x19, 0xe9, 0x5d,
	0x31, 0xcb, 0xee, 0xf9, 0x23, 0xb3, 0xab, 0x4f, 0xb3, 0x62, 0x0b, 0x1f, 0xcb, 0x3f, 0x9d, 0x29,
	0xd9, 0x85, 0x19, 0x36, 0xac, 0xe7, 0xef, 0x9e, 0x45, 0xe1, 0x58, 0xf8, 0x07, 0x84, 0xce, 0x03,
	0xca, 0xe0, 0x53, 0x02, 0x09, 0x3c, 0xf4, 0x72, 0x1d, 0x19, 0xd0, 0x59, 0x10, 0x88, 0xae, 0xcb,
	0xc6, 0x85, 0xb6, 0x2e, 0x4d, 0x49, 0x3e, 0xe8, 0x4d, 0x58, 0xf6, 0xe6, 0xa6, 0xeb, 0x4f, 0x42,
	0xf9, 0x67, 0x55, 0xdf, 0x11, 0x39, 0x68, 0xee, 0x88, 0x1c, 0x76, 0x2c, 0xdc, 0x43, 0xb6, 0x6a,
	0xde, 0x01, 0x4d, 0xed, 0x55, 0xfd, 0xdd, 0x2c, 0x84, 0xf7, 0x98, 0x3a, 0x45, 0x35, 0x39, 0x59,
	0xae, 0x48, 0x38, 0x1e, 0x24, 0x53, 0x5c, 0xf4, 0xe8, 0x4c, 0x40, 0x32, 0x3b, 0x55, 0x43, 0xfc,
	0x7b, 0x39, 0x91, 0x3b, 0x34, 0x36, 0x96, 0xee, 0xef, 0xb0, 0x2c, 0xe5, 0xb2, 0x8d, 0xf0, 0xaa,
	0xb3, 0x0b, 0x96, 0x07, 0xac, 0x83, 0xeb, 0xbd, 0x3c, 0x97, 0xf5, 0x30, 0x24, 0x31, 0x11, 0xd3,
	0x68, 0xe4, 0xf3, 0x00, 0xf2, 0x0e, 0x11, 0x5d, 0xae, 0x0b, 0xf2, 0x25, 0xa7, 0xd0, 0xa2, 0x2e,
	0x7a, 0x68, 0xa7, 0x4f, 0xc9, 0x78, 0xad, 0x95, 0x4b, 0xf0, 0x27, 0x37, 0x3c, 0xb3, 0x72, 0x60,
	0x04, 0xad, 0x8b, 0x1c, 0x0b, 0x7f, 0x90, 0x35, 0x90, 0x59, 0x52, 0x52, 0xbd, 0x06, 0x4c, 0xc9,
	0x5a, 0x8f, 0x8e, 0xe5, 0xca, 0x51, 0x1f, 0x3f, 0x55, 0x9f, 0x53, 0x75, 0xe3, 0xf3, 0x88, 0x39,
	0x56, 0xfb, 0xd5, 0xdf, 0x2f, 0x27, 0x3e, 0xbf, 0x49, 0xae, 0x0f, 0x3d, 0x3a, 0x3d, 0x6a, 0xb5,
	0xbc, 0xf0, 0x28, 0xfd, 0x34, 0x3b, 0x92, 0xaa, 0xd7, 0x4f, 0xe4, 0x37, 0x5b, 0xeb, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xbf, 0x4e, 0xac, 0xf9, 0x32, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DplatformOSClient is the client API for DplatformOS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DplatformOSClient interface {
	// dplatformos
	//
	GetBlocks(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Reply, error)
	//
	GetLastHeader(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Header, error)
	//
	CreateRawTransaction(ctx context.Context, in *CreateTx, opts ...grpc.CallOption) (*UnsignTx, error)
	CreateRawTxGroup(ctx context.Context, in *CreateTransactionGroup, opts ...grpc.CallOption) (*UnsignTx, error)
	//
	QueryTransaction(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*TransactionDetail, error)
	//
	SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error)
	//
	GetTransactionByAddr(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*ReplyTxInfos, error)
	//
	GetTransactionByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*TransactionDetails, error)
	//
	GetMemPool(ctx context.Context, in *ReqGetMempool, opts ...grpc.CallOption) (*ReplyTxList, error)
	//
	//
	GetAccounts(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletAccounts, error)
	//    lable
	GetAccount(ctx context.Context, in *ReqGetAccount, opts ...grpc.CallOption) (*WalletAccount, error)
	//
	NewAccount(ctx context.Context, in *ReqNewAccount, opts ...grpc.CallOption) (*WalletAccount, error)
	//
	WalletTransactionList(ctx context.Context, in *ReqWalletTransactionList, opts ...grpc.CallOption) (*WalletTxDetails, error)
	//
	ImportPrivkey(ctx context.Context, in *ReqWalletImportPrivkey, opts ...grpc.CallOption) (*WalletAccount, error)
	//
	SendToAddress(ctx context.Context, in *ReqWalletSendToAddress, opts ...grpc.CallOption) (*ReplyHash, error)
	//
	SetTxFee(ctx context.Context, in *ReqWalletSetFee, opts ...grpc.CallOption) (*Reply, error)
	//
	SetLabl(ctx context.Context, in *ReqWalletSetLabel, opts ...grpc.CallOption) (*WalletAccount, error)
	//
	MergeBalance(ctx context.Context, in *ReqWalletMergeBalance, opts ...grpc.CallOption) (*ReplyHashes, error)
	//
	SetPasswd(ctx context.Context, in *ReqWalletSetPasswd, opts ...grpc.CallOption) (*Reply, error)
	//
	Lock(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	//
	UnLock(ctx context.Context, in *WalletUnLock, opts ...grpc.CallOption) (*Reply, error)
	//     Mempool
	GetLastMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error)
	//     ProperFee
	GetProperFee(ctx context.Context, in *ReqProperFee, opts ...grpc.CallOption) (*ReplyProperFee, error)
	//
	GetWalletStatus(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletStatus, error)
	//
	///
	GetBlockOverview(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*BlockOverview, error)
	GetAddrOverview(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*AddrOverview, error)
	GetBlockHash(ctx context.Context, in *ReqInt, opts ...grpc.CallOption) (*ReplyHash, error)
	// seed
	//   seed
	GenSeed(ctx context.Context, in *GenSeedLang, opts ...grpc.CallOption) (*ReplySeed, error)
	//  seed
	GetSeed(ctx context.Context, in *GetSeedByPw, opts ...grpc.CallOption) (*ReplySeed, error)
	//  seed
	SaveSeed(ctx context.Context, in *SaveSeedByPw, opts ...grpc.CallOption) (*Reply, error)
	// Balance Query
	//
	GetBalance(ctx context.Context, in *ReqBalance, opts ...grpc.CallOption) (*Accounts, error)
	QueryChain(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error)
	ExecWallet(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error)
	QueryConsensus(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error)
	CreateTransaction(ctx context.Context, in *CreateTxIn, opts ...grpc.CallOption) (*UnsignTx, error)
	//
	GetHexTxByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*HexTx, error)
	//
	DumpPrivkey(ctx context.Context, in *ReqString, opts ...grpc.CallOption) (*ReplyString, error)
	//
	DumpPrivkeysFile(ctx context.Context, in *ReqPrivkeysFile, opts ...grpc.CallOption) (*Reply, error)
	//
	ImportPrivkeysFile(ctx context.Context, in *ReqPrivkeysFile, opts ...grpc.CallOption) (*Reply, error)
	//
	Version(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*VersionInfo, error)
	//
	IsSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	//
	GetPeerInfo(ctx context.Context, in *P2PGetPeerReq, opts ...grpc.CallOption) (*PeerList, error)
	//
	NetInfo(ctx context.Context, in *P2PGetNetInfoReq, opts ...grpc.CallOption) (*NodeNetInfo, error)
	// ntpclock
	IsNtpClockSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	//
	GetFatalFailure(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int32, error)
	GetLastBlockSequence(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int64, error)
	// get add block's sequence by hash
	GetSequenceByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*Int64, error)
	//  block hash      blocks
	GetBlockByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*BlockDetails, error)
	//  block seq      blocks hash
	GetBlockBySeq(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*BlockSeq, error)
	//  dplatformos
	CloseQueue(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	//
	GetAllExecBalance(ctx context.Context, in *ReqAllExecBalance, opts ...grpc.CallOption) (*AllExecBalance, error)
	//
	SignRawTx(ctx context.Context, in *ReqSignRawTx, opts ...grpc.CallOption) (*ReplySignRawTx, error)
	CreateNoBalanceTransaction(ctx context.Context, in *NoBalanceTx, opts ...grpc.CallOption) (*ReplySignRawTx, error)
	//     HASH
	QueryRandNum(ctx context.Context, in *ReqRandHash, opts ...grpc.CallOption) (*ReplyHash, error)
	//       fork
	GetFork(ctx context.Context, in *ReqKey, opts ...grpc.CallOption) (*Int64, error)
	CreateNoBalanceTxs(ctx context.Context, in *NoBalanceTxs, opts ...grpc.CallOption) (*ReplySignRawTx, error)
	//  seq  title
	GetParaTxByTitle(ctx context.Context, in *ReqParaTxByTitle, opts ...grpc.CallOption) (*ParaTxDetails, error)
	//     title
	LoadParaTxByTitle(ctx context.Context, in *ReqHeightByTitle, opts ...grpc.CallOption) (*ReplyHeightByTitle, error)
	//        +title
	GetParaTxByHeight(ctx context.Context, in *ReqParaTxByHeight, opts ...grpc.CallOption) (*ParaTxDetails, error)
	//
	GetHeaders(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Headers, error)
}

type dplatformosClient struct {
	cc grpc.ClientConnInterface
}

func NewDplatformOSClient(cc grpc.ClientConnInterface) DplatformOSClient {
	return &dplatformosClient{cc}
}

func (c *dplatformosClient) GetBlocks(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetLastHeader(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Header, error) {
	out := new(Header)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetLastHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) CreateRawTransaction(ctx context.Context, in *CreateTx, opts ...grpc.CallOption) (*UnsignTx, error) {
	out := new(UnsignTx)
	err := c.cc.Invoke(ctx, "/types.dplatformos/CreateRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) CreateRawTxGroup(ctx context.Context, in *CreateTransactionGroup, opts ...grpc.CallOption) (*UnsignTx, error) {
	out := new(UnsignTx)
	err := c.cc.Invoke(ctx, "/types.dplatformos/CreateRawTxGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) QueryTransaction(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*TransactionDetail, error) {
	out := new(TransactionDetail)
	err := c.cc.Invoke(ctx, "/types.dplatformos/QueryTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetTransactionByAddr(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*ReplyTxInfos, error) {
	out := new(ReplyTxInfos)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetTransactionByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetTransactionByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*TransactionDetails, error) {
	out := new(TransactionDetails)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetTransactionByHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetMemPool(ctx context.Context, in *ReqGetMempool, opts ...grpc.CallOption) (*ReplyTxList, error) {
	out := new(ReplyTxList)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetMemPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetAccounts(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletAccounts, error) {
	out := new(WalletAccounts)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetAccount(ctx context.Context, in *ReqGetAccount, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) NewAccount(ctx context.Context, in *ReqNewAccount, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := c.cc.Invoke(ctx, "/types.dplatformos/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) WalletTransactionList(ctx context.Context, in *ReqWalletTransactionList, opts ...grpc.CallOption) (*WalletTxDetails, error) {
	out := new(WalletTxDetails)
	err := c.cc.Invoke(ctx, "/types.dplatformos/WalletTransactionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) ImportPrivkey(ctx context.Context, in *ReqWalletImportPrivkey, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := c.cc.Invoke(ctx, "/types.dplatformos/ImportPrivkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) SendToAddress(ctx context.Context, in *ReqWalletSendToAddress, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := c.cc.Invoke(ctx, "/types.dplatformos/SendToAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) SetTxFee(ctx context.Context, in *ReqWalletSetFee, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/SetTxFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) SetLabl(ctx context.Context, in *ReqWalletSetLabel, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := c.cc.Invoke(ctx, "/types.dplatformos/SetLabl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) MergeBalance(ctx context.Context, in *ReqWalletMergeBalance, opts ...grpc.CallOption) (*ReplyHashes, error) {
	out := new(ReplyHashes)
	err := c.cc.Invoke(ctx, "/types.dplatformos/MergeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) SetPasswd(ctx context.Context, in *ReqWalletSetPasswd, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/SetPasswd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) Lock(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) UnLock(ctx context.Context, in *WalletUnLock, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/UnLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetLastMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error) {
	out := new(ReplyTxList)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetLastMemPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetProperFee(ctx context.Context, in *ReqProperFee, opts ...grpc.CallOption) (*ReplyProperFee, error) {
	out := new(ReplyProperFee)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetProperFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetWalletStatus(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletStatus, error) {
	out := new(WalletStatus)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetWalletStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetBlockOverview(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*BlockOverview, error) {
	out := new(BlockOverview)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetBlockOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetAddrOverview(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*AddrOverview, error) {
	out := new(AddrOverview)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetAddrOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetBlockHash(ctx context.Context, in *ReqInt, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GenSeed(ctx context.Context, in *GenSeedLang, opts ...grpc.CallOption) (*ReplySeed, error) {
	out := new(ReplySeed)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GenSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetSeed(ctx context.Context, in *GetSeedByPw, opts ...grpc.CallOption) (*ReplySeed, error) {
	out := new(ReplySeed)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) SaveSeed(ctx context.Context, in *SaveSeedByPw, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/SaveSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetBalance(ctx context.Context, in *ReqBalance, opts ...grpc.CallOption) (*Accounts, error) {
	out := new(Accounts)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) QueryChain(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/QueryChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) ExecWallet(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/ExecWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) QueryConsensus(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/QueryConsensus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) CreateTransaction(ctx context.Context, in *CreateTxIn, opts ...grpc.CallOption) (*UnsignTx, error) {
	out := new(UnsignTx)
	err := c.cc.Invoke(ctx, "/types.dplatformos/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetHexTxByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*HexTx, error) {
	out := new(HexTx)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetHexTxByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) DumpPrivkey(ctx context.Context, in *ReqString, opts ...grpc.CallOption) (*ReplyString, error) {
	out := new(ReplyString)
	err := c.cc.Invoke(ctx, "/types.dplatformos/DumpPrivkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) DumpPrivkeysFile(ctx context.Context, in *ReqPrivkeysFile, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/DumpPrivkeysFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) ImportPrivkeysFile(ctx context.Context, in *ReqPrivkeysFile, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/ImportPrivkeysFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) Version(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*VersionInfo, error) {
	out := new(VersionInfo)
	err := c.cc.Invoke(ctx, "/types.dplatformos/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) IsSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/IsSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetPeerInfo(ctx context.Context, in *P2PGetPeerReq, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetPeerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) NetInfo(ctx context.Context, in *P2PGetNetInfoReq, opts ...grpc.CallOption) (*NodeNetInfo, error) {
	out := new(NodeNetInfo)
	err := c.cc.Invoke(ctx, "/types.dplatformos/NetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) IsNtpClockSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/IsNtpClockSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetFatalFailure(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int32, error) {
	out := new(Int32)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetFatalFailure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetLastBlockSequence(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetLastBlockSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetSequenceByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetSequenceByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetBlockByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*BlockDetails, error) {
	out := new(BlockDetails)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetBlockByHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetBlockBySeq(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*BlockSeq, error) {
	out := new(BlockSeq)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetBlockBySeq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) CloseQueue(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.dplatformos/CloseQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetAllExecBalance(ctx context.Context, in *ReqAllExecBalance, opts ...grpc.CallOption) (*AllExecBalance, error) {
	out := new(AllExecBalance)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetAllExecBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) SignRawTx(ctx context.Context, in *ReqSignRawTx, opts ...grpc.CallOption) (*ReplySignRawTx, error) {
	out := new(ReplySignRawTx)
	err := c.cc.Invoke(ctx, "/types.dplatformos/SignRawTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) CreateNoBalanceTransaction(ctx context.Context, in *NoBalanceTx, opts ...grpc.CallOption) (*ReplySignRawTx, error) {
	out := new(ReplySignRawTx)
	err := c.cc.Invoke(ctx, "/types.dplatformos/CreateNoBalanceTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) QueryRandNum(ctx context.Context, in *ReqRandHash, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := c.cc.Invoke(ctx, "/types.dplatformos/QueryRandNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetFork(ctx context.Context, in *ReqKey, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetFork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) CreateNoBalanceTxs(ctx context.Context, in *NoBalanceTxs, opts ...grpc.CallOption) (*ReplySignRawTx, error) {
	out := new(ReplySignRawTx)
	err := c.cc.Invoke(ctx, "/types.dplatformos/CreateNoBalanceTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetParaTxByTitle(ctx context.Context, in *ReqParaTxByTitle, opts ...grpc.CallOption) (*ParaTxDetails, error) {
	out := new(ParaTxDetails)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetParaTxByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) LoadParaTxByTitle(ctx context.Context, in *ReqHeightByTitle, opts ...grpc.CallOption) (*ReplyHeightByTitle, error) {
	out := new(ReplyHeightByTitle)
	err := c.cc.Invoke(ctx, "/types.dplatformos/LoadParaTxByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetParaTxByHeight(ctx context.Context, in *ReqParaTxByHeight, opts ...grpc.CallOption) (*ParaTxDetails, error) {
	out := new(ParaTxDetails)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetParaTxByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dplatformosClient) GetHeaders(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Headers, error) {
	out := new(Headers)
	err := c.cc.Invoke(ctx, "/types.dplatformos/GetHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DplatformOSServer is the server API for DplatformOS service.
type DplatformOSServer interface {
	// dplatformos
	//
	GetBlocks(context.Context, *ReqBlocks) (*Reply, error)
	//
	GetLastHeader(context.Context, *ReqNil) (*Header, error)
	//
	CreateRawTransaction(context.Context, *CreateTx) (*UnsignTx, error)
	CreateRawTxGroup(context.Context, *CreateTransactionGroup) (*UnsignTx, error)
	//
	QueryTransaction(context.Context, *ReqHash) (*TransactionDetail, error)
	//
	SendTransaction(context.Context, *Transaction) (*Reply, error)
	//
	GetTransactionByAddr(context.Context, *ReqAddr) (*ReplyTxInfos, error)
	//
	GetTransactionByHashes(context.Context, *ReqHashes) (*TransactionDetails, error)
	//
	GetMemPool(context.Context, *ReqGetMempool) (*ReplyTxList, error)
	//
	//
	GetAccounts(context.Context, *ReqNil) (*WalletAccounts, error)
	//    lable
	GetAccount(context.Context, *ReqGetAccount) (*WalletAccount, error)
	//
	NewAccount(context.Context, *ReqNewAccount) (*WalletAccount, error)
	//
	WalletTransactionList(context.Context, *ReqWalletTransactionList) (*WalletTxDetails, error)
	//
	ImportPrivkey(context.Context, *ReqWalletImportPrivkey) (*WalletAccount, error)
	//
	SendToAddress(context.Context, *ReqWalletSendToAddress) (*ReplyHash, error)
	//
	SetTxFee(context.Context, *ReqWalletSetFee) (*Reply, error)
	//
	SetLabl(context.Context, *ReqWalletSetLabel) (*WalletAccount, error)
	//
	MergeBalance(context.Context, *ReqWalletMergeBalance) (*ReplyHashes, error)
	//
	SetPasswd(context.Context, *ReqWalletSetPasswd) (*Reply, error)
	//
	Lock(context.Context, *ReqNil) (*Reply, error)
	//
	UnLock(context.Context, *WalletUnLock) (*Reply, error)
	//     Mempool
	GetLastMemPool(context.Context, *ReqNil) (*ReplyTxList, error)
	//     ProperFee
	GetProperFee(context.Context, *ReqProperFee) (*ReplyProperFee, error)
	//
	GetWalletStatus(context.Context, *ReqNil) (*WalletStatus, error)
	//
	///
	GetBlockOverview(context.Context, *ReqHash) (*BlockOverview, error)
	GetAddrOverview(context.Context, *ReqAddr) (*AddrOverview, error)
	GetBlockHash(context.Context, *ReqInt) (*ReplyHash, error)
	// seed
	//   seed
	GenSeed(context.Context, *GenSeedLang) (*ReplySeed, error)
	//  seed
	GetSeed(context.Context, *GetSeedByPw) (*ReplySeed, error)
	//  seed
	SaveSeed(context.Context, *SaveSeedByPw) (*Reply, error)
	// Balance Query
	//
	GetBalance(context.Context, *ReqBalance) (*Accounts, error)
	QueryChain(context.Context, *ChainExecutor) (*Reply, error)
	ExecWallet(context.Context, *ChainExecutor) (*Reply, error)
	QueryConsensus(context.Context, *ChainExecutor) (*Reply, error)
	CreateTransaction(context.Context, *CreateTxIn) (*UnsignTx, error)
	//
	GetHexTxByHash(context.Context, *ReqHash) (*HexTx, error)
	//
	DumpPrivkey(context.Context, *ReqString) (*ReplyString, error)
	//
	DumpPrivkeysFile(context.Context, *ReqPrivkeysFile) (*Reply, error)
	//
	ImportPrivkeysFile(context.Context, *ReqPrivkeysFile) (*Reply, error)
	//
	Version(context.Context, *ReqNil) (*VersionInfo, error)
	//
	IsSync(context.Context, *ReqNil) (*Reply, error)
	//
	GetPeerInfo(context.Context, *P2PGetPeerReq) (*PeerList, error)
	//
	NetInfo(context.Context, *P2PGetNetInfoReq) (*NodeNetInfo, error)
	// ntpclock
	IsNtpClockSync(context.Context, *ReqNil) (*Reply, error)
	//
	GetFatalFailure(context.Context, *ReqNil) (*Int32, error)
	GetLastBlockSequence(context.Context, *ReqNil) (*Int64, error)
	// get add block's sequence by hash
	GetSequenceByHash(context.Context, *ReqHash) (*Int64, error)
	//  block hash      blocks
	GetBlockByHashes(context.Context, *ReqHashes) (*BlockDetails, error)
	//  block seq      blocks hash
	GetBlockBySeq(context.Context, *Int64) (*BlockSeq, error)
	//  dplatformos
	CloseQueue(context.Context, *ReqNil) (*Reply, error)
	//
	GetAllExecBalance(context.Context, *ReqAllExecBalance) (*AllExecBalance, error)
	//
	SignRawTx(context.Context, *ReqSignRawTx) (*ReplySignRawTx, error)
	CreateNoBalanceTransaction(context.Context, *NoBalanceTx) (*ReplySignRawTx, error)
	//     HASH
	QueryRandNum(context.Context, *ReqRandHash) (*ReplyHash, error)
	//       fork
	GetFork(context.Context, *ReqKey) (*Int64, error)
	CreateNoBalanceTxs(context.Context, *NoBalanceTxs) (*ReplySignRawTx, error)
	//  seq  title
	GetParaTxByTitle(context.Context, *ReqParaTxByTitle) (*ParaTxDetails, error)
	//     title
	LoadParaTxByTitle(context.Context, *ReqHeightByTitle) (*ReplyHeightByTitle, error)
	//        +title
	GetParaTxByHeight(context.Context, *ReqParaTxByHeight) (*ParaTxDetails, error)
	//
	GetHeaders(context.Context, *ReqBlocks) (*Headers, error)
}

// UnimplementedDplatformOSServer can be embedded to have forward compatible implementations.
type UnimplementedDplatformOSServer struct {
}

func (*UnimplementedDplatformOSServer) GetBlocks(ctx context.Context, req *ReqBlocks) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (*UnimplementedDplatformOSServer) GetLastHeader(ctx context.Context, req *ReqNil) (*Header, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastHeader not implemented")
}
func (*UnimplementedDplatformOSServer) CreateRawTransaction(ctx context.Context, req *CreateTx) (*UnsignTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRawTransaction not implemented")
}
func (*UnimplementedDplatformOSServer) CreateRawTxGroup(ctx context.Context, req *CreateTransactionGroup) (*UnsignTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRawTxGroup not implemented")
}
func (*UnimplementedDplatformOSServer) QueryTransaction(ctx context.Context, req *ReqHash) (*TransactionDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTransaction not implemented")
}
func (*UnimplementedDplatformOSServer) SendTransaction(ctx context.Context, req *Transaction) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedDplatformOSServer) GetTransactionByAddr(ctx context.Context, req *ReqAddr) (*ReplyTxInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByAddr not implemented")
}
func (*UnimplementedDplatformOSServer) GetTransactionByHashes(ctx context.Context, req *ReqHashes) (*TransactionDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHashes not implemented")
}
func (*UnimplementedDplatformOSServer) GetMemPool(ctx context.Context, req *ReqGetMempool) (*ReplyTxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemPool not implemented")
}
func (*UnimplementedDplatformOSServer) GetAccounts(ctx context.Context, req *ReqNil) (*WalletAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (*UnimplementedDplatformOSServer) GetAccount(ctx context.Context, req *ReqGetAccount) (*WalletAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedDplatformOSServer) NewAccount(ctx context.Context, req *ReqNewAccount) (*WalletAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAccount not implemented")
}
func (*UnimplementedDplatformOSServer) WalletTransactionList(ctx context.Context, req *ReqWalletTransactionList) (*WalletTxDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletTransactionList not implemented")
}
func (*UnimplementedDplatformOSServer) ImportPrivkey(ctx context.Context, req *ReqWalletImportPrivkey) (*WalletAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPrivkey not implemented")
}
func (*UnimplementedDplatformOSServer) SendToAddress(ctx context.Context, req *ReqWalletSendToAddress) (*ReplyHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAddress not implemented")
}
func (*UnimplementedDplatformOSServer) SetTxFee(ctx context.Context, req *ReqWalletSetFee) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTxFee not implemented")
}
func (*UnimplementedDplatformOSServer) SetLabl(ctx context.Context, req *ReqWalletSetLabel) (*WalletAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLabl not implemented")
}
func (*UnimplementedDplatformOSServer) MergeBalance(ctx context.Context, req *ReqWalletMergeBalance) (*ReplyHashes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeBalance not implemented")
}
func (*UnimplementedDplatformOSServer) SetPasswd(ctx context.Context, req *ReqWalletSetPasswd) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPasswd not implemented")
}
func (*UnimplementedDplatformOSServer) Lock(ctx context.Context, req *ReqNil) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (*UnimplementedDplatformOSServer) UnLock(ctx context.Context, req *WalletUnLock) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLock not implemented")
}
func (*UnimplementedDplatformOSServer) GetLastMemPool(ctx context.Context, req *ReqNil) (*ReplyTxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMemPool not implemented")
}
func (*UnimplementedDplatformOSServer) GetProperFee(ctx context.Context, req *ReqProperFee) (*ReplyProperFee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperFee not implemented")
}
func (*UnimplementedDplatformOSServer) GetWalletStatus(ctx context.Context, req *ReqNil) (*WalletStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletStatus not implemented")
}
func (*UnimplementedDplatformOSServer) GetBlockOverview(ctx context.Context, req *ReqHash) (*BlockOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockOverview not implemented")
}
func (*UnimplementedDplatformOSServer) GetAddrOverview(ctx context.Context, req *ReqAddr) (*AddrOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddrOverview not implemented")
}
func (*UnimplementedDplatformOSServer) GetBlockHash(ctx context.Context, req *ReqInt) (*ReplyHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHash not implemented")
}
func (*UnimplementedDplatformOSServer) GenSeed(ctx context.Context, req *GenSeedLang) (*ReplySeed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenSeed not implemented")
}
func (*UnimplementedDplatformOSServer) GetSeed(ctx context.Context, req *GetSeedByPw) (*ReplySeed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeed not implemented")
}
func (*UnimplementedDplatformOSServer) SaveSeed(ctx context.Context, req *SaveSeedByPw) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSeed not implemented")
}
func (*UnimplementedDplatformOSServer) GetBalance(ctx context.Context, req *ReqBalance) (*Accounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedDplatformOSServer) QueryChain(ctx context.Context, req *ChainExecutor) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChain not implemented")
}
func (*UnimplementedDplatformOSServer) ExecWallet(ctx context.Context, req *ChainExecutor) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecWallet not implemented")
}
func (*UnimplementedDplatformOSServer) QueryConsensus(ctx context.Context, req *ChainExecutor) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryConsensus not implemented")
}
func (*UnimplementedDplatformOSServer) CreateTransaction(ctx context.Context, req *CreateTxIn) (*UnsignTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedDplatformOSServer) GetHexTxByHash(ctx context.Context, req *ReqHash) (*HexTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHexTxByHash not implemented")
}
func (*UnimplementedDplatformOSServer) DumpPrivkey(ctx context.Context, req *ReqString) (*ReplyString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpPrivkey not implemented")
}
func (*UnimplementedDplatformOSServer) DumpPrivkeysFile(ctx context.Context, req *ReqPrivkeysFile) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpPrivkeysFile not implemented")
}
func (*UnimplementedDplatformOSServer) ImportPrivkeysFile(ctx context.Context, req *ReqPrivkeysFile) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPrivkeysFile not implemented")
}
func (*UnimplementedDplatformOSServer) Version(ctx context.Context, req *ReqNil) (*VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedDplatformOSServer) IsSync(ctx context.Context, req *ReqNil) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSync not implemented")
}
func (*UnimplementedDplatformOSServer) GetPeerInfo(ctx context.Context, req *P2PGetPeerReq) (*PeerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerInfo not implemented")
}
func (*UnimplementedDplatformOSServer) NetInfo(ctx context.Context, req *P2PGetNetInfoReq) (*NodeNetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetInfo not implemented")
}
func (*UnimplementedDplatformOSServer) IsNtpClockSync(ctx context.Context, req *ReqNil) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsNtpClockSync not implemented")
}
func (*UnimplementedDplatformOSServer) GetFatalFailure(ctx context.Context, req *ReqNil) (*Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFatalFailure not implemented")
}
func (*UnimplementedDplatformOSServer) GetLastBlockSequence(ctx context.Context, req *ReqNil) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastBlockSequence not implemented")
}
func (*UnimplementedDplatformOSServer) GetSequenceByHash(ctx context.Context, req *ReqHash) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSequenceByHash not implemented")
}
func (*UnimplementedDplatformOSServer) GetBlockByHashes(ctx context.Context, req *ReqHashes) (*BlockDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHashes not implemented")
}
func (*UnimplementedDplatformOSServer) GetBlockBySeq(ctx context.Context, req *Int64) (*BlockSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockBySeq not implemented")
}
func (*UnimplementedDplatformOSServer) CloseQueue(ctx context.Context, req *ReqNil) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseQueue not implemented")
}
func (*UnimplementedDplatformOSServer) GetAllExecBalance(ctx context.Context, req *ReqAllExecBalance) (*AllExecBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExecBalance not implemented")
}
func (*UnimplementedDplatformOSServer) SignRawTx(ctx context.Context, req *ReqSignRawTx) (*ReplySignRawTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignRawTx not implemented")
}
func (*UnimplementedDplatformOSServer) CreateNoBalanceTransaction(ctx context.Context, req *NoBalanceTx) (*ReplySignRawTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNoBalanceTransaction not implemented")
}
func (*UnimplementedDplatformOSServer) QueryRandNum(ctx context.Context, req *ReqRandHash) (*ReplyHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRandNum not implemented")
}
func (*UnimplementedDplatformOSServer) GetFork(ctx context.Context, req *ReqKey) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFork not implemented")
}
func (*UnimplementedDplatformOSServer) CreateNoBalanceTxs(ctx context.Context, req *NoBalanceTxs) (*ReplySignRawTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNoBalanceTxs not implemented")
}
func (*UnimplementedDplatformOSServer) GetParaTxByTitle(ctx context.Context, req *ReqParaTxByTitle) (*ParaTxDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParaTxByTitle not implemented")
}
func (*UnimplementedDplatformOSServer) LoadParaTxByTitle(ctx context.Context, req *ReqHeightByTitle) (*ReplyHeightByTitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadParaTxByTitle not implemented")
}
func (*UnimplementedDplatformOSServer) GetParaTxByHeight(ctx context.Context, req *ReqParaTxByHeight) (*ParaTxDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParaTxByHeight not implemented")
}
func (*UnimplementedDplatformOSServer) GetHeaders(ctx context.Context, req *ReqBlocks) (*Headers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeaders not implemented")
}

func RegisterDplatformOSServer(s *grpc.Server, srv DplatformOSServer) {
	s.RegisterService(&_DplatformOS_serviceDesc, srv)
}

func _DplatformOS_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetBlocks(ctx, req.(*ReqBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetLastHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetLastHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetLastHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetLastHeader(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_CreateRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).CreateRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/CreateRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).CreateRawTransaction(ctx, req.(*CreateTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_CreateRawTxGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).CreateRawTxGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/CreateRawTxGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).CreateRawTxGroup(ctx, req.(*CreateTransactionGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_QueryTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).QueryTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/QueryTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).QueryTransaction(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).SendTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetTransactionByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetTransactionByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetTransactionByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetTransactionByAddr(ctx, req.(*ReqAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetTransactionByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetTransactionByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetTransactionByHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetTransactionByHashes(ctx, req.(*ReqHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMempool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetMemPool(ctx, req.(*ReqGetMempool))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetAccounts(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetAccount(ctx, req.(*ReqGetAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNewAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).NewAccount(ctx, req.(*ReqNewAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_WalletTransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletTransactionList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).WalletTransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/WalletTransactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).WalletTransactionList(ctx, req.(*ReqWalletTransactionList))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_ImportPrivkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletImportPrivkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).ImportPrivkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/ImportPrivkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).ImportPrivkey(ctx, req.(*ReqWalletImportPrivkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_SendToAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSendToAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).SendToAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/SendToAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).SendToAddress(ctx, req.(*ReqWalletSendToAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_SetTxFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).SetTxFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/SetTxFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).SetTxFee(ctx, req.(*ReqWalletSetFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_SetLabl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).SetLabl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/SetLabl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).SetLabl(ctx, req.(*ReqWalletSetLabel))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_MergeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletMergeBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).MergeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/MergeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).MergeBalance(ctx, req.(*ReqWalletMergeBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_SetPasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetPasswd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).SetPasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/SetPasswd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).SetPasswd(ctx, req.(*ReqWalletSetPasswd))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).Lock(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_UnLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletUnLock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).UnLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/UnLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).UnLock(ctx, req.(*WalletUnLock))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetLastMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetLastMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetLastMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetLastMemPool(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetProperFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqProperFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetProperFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetProperFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetProperFee(ctx, req.(*ReqProperFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetWalletStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetWalletStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetWalletStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetWalletStatus(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetBlockOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetBlockOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetBlockOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetBlockOverview(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetAddrOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetAddrOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetAddrOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetAddrOverview(ctx, req.(*ReqAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetBlockHash(ctx, req.(*ReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GenSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenSeedLang)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GenSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GenSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GenSeed(ctx, req.(*GenSeedLang))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeedByPw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetSeed(ctx, req.(*GetSeedByPw))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_SaveSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSeedByPw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).SaveSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/SaveSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).SaveSeed(ctx, req.(*SaveSeedByPw))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetBalance(ctx, req.(*ReqBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_QueryChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).QueryChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/QueryChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).QueryChain(ctx, req.(*ChainExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_ExecWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).ExecWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/ExecWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).ExecWallet(ctx, req.(*ChainExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_QueryConsensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).QueryConsensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/QueryConsensus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).QueryConsensus(ctx, req.(*ChainExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTxIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).CreateTransaction(ctx, req.(*CreateTxIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetHexTxByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetHexTxByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetHexTxByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetHexTxByHash(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_DumpPrivkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).DumpPrivkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/DumpPrivkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).DumpPrivkey(ctx, req.(*ReqString))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_DumpPrivkeysFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPrivkeysFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).DumpPrivkeysFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/DumpPrivkeysFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).DumpPrivkeysFile(ctx, req.(*ReqPrivkeysFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_ImportPrivkeysFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPrivkeysFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).ImportPrivkeysFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/ImportPrivkeysFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).ImportPrivkeysFile(ctx, req.(*ReqPrivkeysFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).Version(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_IsSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).IsSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/IsSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).IsSync(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetPeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetPeerInfo(ctx, req.(*P2PGetPeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_NetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetNetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).NetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/NetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).NetInfo(ctx, req.(*P2PGetNetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_IsNtpClockSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).IsNtpClockSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/IsNtpClockSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).IsNtpClockSync(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetFatalFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetFatalFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetFatalFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetFatalFailure(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetLastBlockSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetLastBlockSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetLastBlockSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetLastBlockSequence(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetSequenceByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetSequenceByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetSequenceByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetSequenceByHash(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetBlockByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetBlockByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetBlockByHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetBlockByHashes(ctx, req.(*ReqHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetBlockBySeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetBlockBySeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetBlockBySeq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetBlockBySeq(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_CloseQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).CloseQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/CloseQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).CloseQueue(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetAllExecBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAllExecBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetAllExecBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetAllExecBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetAllExecBalance(ctx, req.(*ReqAllExecBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_SignRawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignRawTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).SignRawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/SignRawTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).SignRawTx(ctx, req.(*ReqSignRawTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_CreateNoBalanceTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoBalanceTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).CreateNoBalanceTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/CreateNoBalanceTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).CreateNoBalanceTransaction(ctx, req.(*NoBalanceTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_QueryRandNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRandHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).QueryRandNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/QueryRandNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).QueryRandNum(ctx, req.(*ReqRandHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetFork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetFork(ctx, req.(*ReqKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_CreateNoBalanceTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoBalanceTxs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).CreateNoBalanceTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/CreateNoBalanceTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).CreateNoBalanceTxs(ctx, req.(*NoBalanceTxs))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetParaTxByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParaTxByTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetParaTxByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetParaTxByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetParaTxByTitle(ctx, req.(*ReqParaTxByTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_LoadParaTxByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHeightByTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).LoadParaTxByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/LoadParaTxByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).LoadParaTxByTitle(ctx, req.(*ReqHeightByTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetParaTxByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParaTxByHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetParaTxByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetParaTxByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetParaTxByHeight(ctx, req.(*ReqParaTxByHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _DplatformOS_GetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DplatformOSServer).GetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.dplatformos/GetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DplatformOSServer).GetHeaders(ctx, req.(*ReqBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

var _DplatformOS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.dplatformos",
	HandlerType: (*DplatformOSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlocks",
			Handler:    _DplatformOS_GetBlocks_Handler,
		},
		{
			MethodName: "GetLastHeader",
			Handler:    _DplatformOS_GetLastHeader_Handler,
		},
		{
			MethodName: "CreateRawTransaction",
			Handler:    _DplatformOS_CreateRawTransaction_Handler,
		},
		{
			MethodName: "CreateRawTxGroup",
			Handler:    _DplatformOS_CreateRawTxGroup_Handler,
		},
		{
			MethodName: "QueryTransaction",
			Handler:    _DplatformOS_QueryTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _DplatformOS_SendTransaction_Handler,
		},
		{
			MethodName: "GetTransactionByAddr",
			Handler:    _DplatformOS_GetTransactionByAddr_Handler,
		},
		{
			MethodName: "GetTransactionByHashes",
			Handler:    _DplatformOS_GetTransactionByHashes_Handler,
		},
		{
			MethodName: "GetMemPool",
			Handler:    _DplatformOS_GetMemPool_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _DplatformOS_GetAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _DplatformOS_GetAccount_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _DplatformOS_NewAccount_Handler,
		},
		{
			MethodName: "WalletTransactionList",
			Handler:    _DplatformOS_WalletTransactionList_Handler,
		},
		{
			MethodName: "ImportPrivkey",
			Handler:    _DplatformOS_ImportPrivkey_Handler,
		},
		{
			MethodName: "SendToAddress",
			Handler:    _DplatformOS_SendToAddress_Handler,
		},
		{
			MethodName: "SetTxFee",
			Handler:    _DplatformOS_SetTxFee_Handler,
		},
		{
			MethodName: "SetLabl",
			Handler:    _DplatformOS_SetLabl_Handler,
		},
		{
			MethodName: "MergeBalance",
			Handler:    _DplatformOS_MergeBalance_Handler,
		},
		{
			MethodName: "SetPasswd",
			Handler:    _DplatformOS_SetPasswd_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _DplatformOS_Lock_Handler,
		},
		{
			MethodName: "UnLock",
			Handler:    _DplatformOS_UnLock_Handler,
		},
		{
			MethodName: "GetLastMemPool",
			Handler:    _DplatformOS_GetLastMemPool_Handler,
		},
		{
			MethodName: "GetProperFee",
			Handler:    _DplatformOS_GetProperFee_Handler,
		},
		{
			MethodName: "GetWalletStatus",
			Handler:    _DplatformOS_GetWalletStatus_Handler,
		},
		{
			MethodName: "GetBlockOverview",
			Handler:    _DplatformOS_GetBlockOverview_Handler,
		},
		{
			MethodName: "GetAddrOverview",
			Handler:    _DplatformOS_GetAddrOverview_Handler,
		},
		{
			MethodName: "GetBlockHash",
			Handler:    _DplatformOS_GetBlockHash_Handler,
		},
		{
			MethodName: "GenSeed",
			Handler:    _DplatformOS_GenSeed_Handler,
		},
		{
			MethodName: "GetSeed",
			Handler:    _DplatformOS_GetSeed_Handler,
		},
		{
			MethodName: "SaveSeed",
			Handler:    _DplatformOS_SaveSeed_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _DplatformOS_GetBalance_Handler,
		},
		{
			MethodName: "QueryChain",
			Handler:    _DplatformOS_QueryChain_Handler,
		},
		{
			MethodName: "ExecWallet",
			Handler:    _DplatformOS_ExecWallet_Handler,
		},
		{
			MethodName: "QueryConsensus",
			Handler:    _DplatformOS_QueryConsensus_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _DplatformOS_CreateTransaction_Handler,
		},
		{
			MethodName: "GetHexTxByHash",
			Handler:    _DplatformOS_GetHexTxByHash_Handler,
		},
		{
			MethodName: "DumpPrivkey",
			Handler:    _DplatformOS_DumpPrivkey_Handler,
		},
		{
			MethodName: "DumpPrivkeysFile",
			Handler:    _DplatformOS_DumpPrivkeysFile_Handler,
		},
		{
			MethodName: "ImportPrivkeysFile",
			Handler:    _DplatformOS_ImportPrivkeysFile_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _DplatformOS_Version_Handler,
		},
		{
			MethodName: "IsSync",
			Handler:    _DplatformOS_IsSync_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _DplatformOS_GetPeerInfo_Handler,
		},
		{
			MethodName: "NetInfo",
			Handler:    _DplatformOS_NetInfo_Handler,
		},
		{
			MethodName: "IsNtpClockSync",
			Handler:    _DplatformOS_IsNtpClockSync_Handler,
		},
		{
			MethodName: "GetFatalFailure",
			Handler:    _DplatformOS_GetFatalFailure_Handler,
		},
		{
			MethodName: "GetLastBlockSequence",
			Handler:    _DplatformOS_GetLastBlockSequence_Handler,
		},
		{
			MethodName: "GetSequenceByHash",
			Handler:    _DplatformOS_GetSequenceByHash_Handler,
		},
		{
			MethodName: "GetBlockByHashes",
			Handler:    _DplatformOS_GetBlockByHashes_Handler,
		},
		{
			MethodName: "GetBlockBySeq",
			Handler:    _DplatformOS_GetBlockBySeq_Handler,
		},
		{
			MethodName: "CloseQueue",
			Handler:    _DplatformOS_CloseQueue_Handler,
		},
		{
			MethodName: "GetAllExecBalance",
			Handler:    _DplatformOS_GetAllExecBalance_Handler,
		},
		{
			MethodName: "SignRawTx",
			Handler:    _DplatformOS_SignRawTx_Handler,
		},
		{
			MethodName: "CreateNoBalanceTransaction",
			Handler:    _DplatformOS_CreateNoBalanceTransaction_Handler,
		},
		{
			MethodName: "QueryRandNum",
			Handler:    _DplatformOS_QueryRandNum_Handler,
		},
		{
			MethodName: "GetFork",
			Handler:    _DplatformOS_GetFork_Handler,
		},
		{
			MethodName: "CreateNoBalanceTxs",
			Handler:    _DplatformOS_CreateNoBalanceTxs_Handler,
		},
		{
			MethodName: "GetParaTxByTitle",
			Handler:    _DplatformOS_GetParaTxByTitle_Handler,
		},
		{
			MethodName: "LoadParaTxByTitle",
			Handler:    _DplatformOS_LoadParaTxByTitle_Handler,
		},
		{
			MethodName: "GetParaTxByHeight",
			Handler:    _DplatformOS_GetParaTxByHeight_Handler,
		},
		{
			MethodName: "GetHeaders",
			Handler:    _DplatformOS_GetHeaders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
